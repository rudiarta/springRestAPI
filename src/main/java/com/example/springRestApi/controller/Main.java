package com.example.springRestApi.controller;


import com.example.springRestApi.model.Product;
import com.example.springRestApi.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Optional;

@RequestMapping("/rest/wirgroup")
@RestController
public class Main {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ProductRepository productRepository;

    @GetMapping("/getProduct")
    public String hello()
    {
        return "Hello wirgroup";
    }

    @PreAuthorize("hasRole('USER')")
    @GetMapping(path="/all")
    public @ResponseBody Iterable<Product> getAllUsers() {
        // This returns a JSON or XML with the users
        return productRepository.findAll();
    }

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Product n = new Product();
        n.setName(name);
        productRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/update") // Map ONLY GET Requests
    public @ResponseBody String deleteUser (@RequestParam int id, @RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Product n = productRepository.findById(id).get();
        n.setName(name);
        productRepository.save(n);

        return "update";
    }

    @RequestMapping(value="/logout", method = RequestMethod.GET)
    public String logoutPage (HttpServletRequest request, HttpServletResponse response) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null){
            new SecurityContextLogoutHandler().logout(request, response, auth);
        }
        return "logout success";//You can redirect wherever you want, but generally it's a good practice to show login screen again.
    }

    @GetMapping(path="/delete") // Map ONLY GET Requests
    public @ResponseBody String deleteUser (@RequestParam int id) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        productRepository.deleteById(id);
        return "deleted";
    }

}
